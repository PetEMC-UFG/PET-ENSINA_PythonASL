# -*- coding: utf-8 -*-
"""RespostaEntradaZero.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dpE2pTGyFo4OYpiqk5XCyrhfQqi5MsN7

Resposta a entrada zero
"""

import sympy as sp

def resolver_resposta_entrada_zero(QN_coeffs, cond_iniciais):
    t = sp.symbols('t')
    y = sp.Function('y')(t)

    # Definindo a equação diferencial QN(D)y(t) = 0
    QN = sum(coeff * sp.Derivative(y, t, n) for n, coeff in enumerate(QN_coeffs))
    equacao_homogenea = sp.Eq(QN, 0)

    # Resolvendo a equação característica
    lambda_ = sp.symbols('lambda')
    equacao_caracteristica = sum(coeff * lambda_**n for n, coeff in enumerate(QN_coeffs))
    raizes = sp.solve(equacao_caracteristica, lambda_)

    # Montando a solução geral considerando multiplicidade de raízes
    solucao_geral = 0
    constantes = []
    c_counter = 1

    raizes_mult = sp.roots(equacao_caracteristica, lambda_)
    for raiz, multiplicidade in raizes_mult.items():
        for m in range(multiplicidade):
            constante = sp.symbols(f'c{c_counter}')
            constantes.append(constante)
            solucao_geral += constante * t**m * sp.exp(raiz * t)
            c_counter += 1

    # Criando as condições iniciais
    condicoes = []
    for ordem, valor in enumerate(cond_iniciais):
        condicoes.append(sp.Eq(solucao_geral.diff(t, ordem).subs(t, 0), valor))

    # Resolvendo o sistema de equações para encontrar os valores de c1, c2, ...
    sistema_equacoes = []
    for cond in condicoes:
        sistema_equacoes.append(cond.lhs - cond.rhs)

    solucao_sistema = sp.solve(sistema_equacoes, constantes)

    # Substituindo as constantes na solução geral
    solucao_final = solucao_geral.subs(solucao_sistema)

    return solucao_final

# Exemplo de uso
QN_coeffs = [9, 6, 1]  # Representa D^2 + 6D + 9
cond_iniciais = [5, -2]  # y0(0) = 5, y0'(0) = -2

resposta_entrada_zero = resolver_resposta_entrada_zero(QN_coeffs, cond_iniciais)
print(resposta_entrada_zero)