# -*- coding: utf-8 -*-
"""RespostaImpulsoUnitário.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XVKkS6FPXEQ5pO-AqHIJFk2JTeY71C-B

Resposta ao Impulso Unitário
"""

import sympy as sp

def resposta_ao_impulso(P_s, Q_s):
    # Define as variáveis simbólicas para o tempo e a variável de Laplace
    t = sp.symbols('t', real=True, positive=True)
    s = sp.symbols('s')

    # Calcula a função de transferência H_s
    H_s = P_s / Q_s

    # Calcula a resposta ao impulso h(t) pela transformada inversa de Laplace
    h_t = sp.inverse_laplace_transform(H_s, s, t)

    return h_t

# Exemplo de uso:
# Definindo os polinômios diferenciais P(s) e Q(s)
# Por exemplo, Q(s) = s^2 + 7*s + 6 e P(s) = 2*s^2 + 1
s = sp.symbols('s')
Q_s = s**2 + 7*s + 6
P_s = 2*s**2 + 1

# Calculando a resposta ao impulso h_t
h_t = resposta_ao_impulso(P_s, Q_s)

# Calcula os graus dos polinômios P(s) e Q(s)
grau_P = sp.degree(P_s, s)
grau_Q = sp.degree(Q_s, s)

# Verifica se o sistema é instantâneo (grau de P(s) == grau de Q(s)) e
# Adiciona o termo (b_0 / a_0) * DiracDelta(t) à resposta
if grau_P == grau_Q:

    # Obtém os coeficientes líderes dos polinômios P(s) e Q(s)
    b_0 = sp.LC(P_s, s)  # Coeficiente líder de P(s)
    a_0 = sp.LC(Q_s, s)  # Coeficiente líder de Q(s)

    # Exibindo a resposta ao impulso
    print(f"h(t) = {(b_0 / a_0)}*δ(t) + {h_t}")

else:
  # Exibindo a resposta ao impulso
  print(f"h(t) = {h_t}")